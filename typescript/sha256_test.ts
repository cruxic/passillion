import * as sha256 from './sha256'
import * as assert from './assert'
import {stringToUTF8} from './utf8'
import * as hex from './hex'

function sha256Hex(data:Uint8Array): string {
	return hex.encode(sha256.hash(data));
}

function hmacSha256Hex(key:Uint8Array, data:Uint8Array): string {
	return hex.encode(sha256.hmac(key, data));
}

function reverseByteSeq(n:number): Uint8Array {
	let res = new Uint8Array(n);
	for (let i = 0; i < n; i++) {
		res[i] = 0xFF - (i & 0xFF);
	}

	return res;
}

function byteSeq(n:number): Uint8Array {
	let res = new Uint8Array(n);
	for (let i = 0; i < n; i++) {
		res[i] = i & 0xFF;
	}

	return res;
}


export default function sha256_test() {
	//These test vectors were generated by the Python3 program at the end of this file.

	//
	// sha256
	assert.equal(sha256Hex(stringToUTF8('a')), 'ca978112ca1bbdcafac231b39a23dc4da786eff8147c4e72b9807785afee48bb');
	assert.equal(sha256Hex(stringToUTF8('abc')), 'ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad');
	assert.equal(sha256Hex(reverseByteSeq(256)), 'cd6816b77f68d70001fc3eaa4d42bdd67cb5973b3151cc5292ecc02a3daac6ab');

	//
	// hmac
	assert.equal(hmacSha256Hex(reverseByteSeq(256), stringToUTF8('Hello World')), '9174b4b3063d7c82d47c631c75e8c3f10e8b3983d7d65473920156256f7c0526');

	//
	// hmac with input sizes 1-65
	const N = 65;
	let firstBytes = hex.decode('b5676001b8e90fcdac47d9cf046eb3a1ab79c34f84319981452153317e4f68d0631e8adf308241f5a80dd39f958d7c95388457d46641ce8bb14f340060c25acc38');
	let allResults = new Uint8Array(N * sha256.digestLength);
	for (let i = 0; i < N; i++) {
		let inputSize = i + 1;
		let key = reverseByteSeq(inputSize);
		let msg = byteSeq(inputSize);		
		let res = sha256.hmac(key, msg);

		assert.equal(res.length, sha256.digestLength);
		assert.equal(res[0], firstBytes[i]);

		//append result to allResults
		allResults.set(res, i * sha256.digestLength);
	}

	//hash of all results
	assert.equal(sha256Hex(allResults), 'c67a5248db596f9045239d1461ffae4901527a2ff8714428fd3eaed936c007b4');
}

//Run this Python3 program to verify the above test vectors
/*
import hashlib
import hmac

def hmacSha256(key, msg):
	return hmac.new(key, msg, hashlib.sha256).digest()

def sha256(data):
	m = hashlib.sha256()
	m.update(data)
	return m.digest()

def byteSequence(n):
	ba = bytearray(n)
	for i in range(0, n):
		ba[i] = i & 0xFF
	return ba

def reverseByteSequence(n):
	ba = bytearray(n)
	for i in range(0, n):
		ba[i] = 0xFF - (i & 0xFF)
	return ba

def main():
	print('sha256')
	
	print('sha256("a") == %s' % (sha256(b'a').hex()))

	print('sha256("abc") == %s' % (sha256(b'abc').hex()))
	
	data = reverseByteSequence(256)
	print('sha256(255 through 0) == %s' % (sha256(data).hex()))

	key = reverseByteSequence(256)
	print('hmacSha256(255-0, "Hello World") %s' % hmacSha256(key, b'Hello World').hex())


	print('hmacSha256 with many key and message sizes:')
	firstBytes = bytearray()
	all = bytearray()
	for inputSize in range(1, 66):
		key = reverseByteSequence(inputSize)
		msg = byteSequence(inputSize)

		res = hmacSha256(key, msg)
		if inputSize % 7 == 0:
			print('%02d: %s' % (inputSize, res.hex()))

		all += res
		firstBytes += res[0:1]

	print('First byte of each result %s' % firstBytes.hex())
	print('Hash of all results %s' % sha256(all).hex())
	

if __name__ == '__main__':
	main()

*/
